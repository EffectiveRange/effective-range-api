syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.effectiverange.effectiverange.proto.serverdevice";

import "google/protobuf/timestamp.proto";

package serverdevice;

enum TriggerType {
  ON_CALL = 0;
  ON_SHOT = 1;
  MANUAL = 2;
}

message UUID {
  // String instead of bytes to avoid endianness issues
  string value = 1;
}

message Token {
  UUID id = 1;
  optional UUID pre_id = 2;
  TriggerType trigger = 3;
}

enum ErrorCode {
  UNKNOWN = 0;
  UNREACHABLE = 1;
  STATUS_EXPIRED = 2;
  NO_SESSION = 3;
  SESSION_MISMATCH = 4;
  INVALID_TOKEN = 5;
  INVALID_ARGUMENT = 6;
  INTERNAL_ERROR = 7;
  LOCAL_ERROR = 8;
  INVALID_STATE = 9;
}

message Error {
  ErrorCode code = 1;
  optional string reason = 2;
}

message Component {
  UUID id = 1;
  string uri = 2;
  // Status period in seconds
  uint64 status_period = 3;
  optional Error error = 4;
}

message TokenRequest {
  UUID device_id = 1;
  UUID session_id = 2;
  repeated Token tokens = 3;
}

message EventRequest {
  UUID session_id = 1;
  UUID device_id = 2;
  UUID token_id = 3;
}

message HealthRequest { Component component = 1; }

message SessionRequest {
  UUID device_id = 1;
  UUID session_id = 2;
}

message Response { optional Error error = 1; }

enum SessionState {
  NOT_IN_SESSION = 0;
  IN_SESSION = 1;
  ACTIVE_WITH_TOKENS = 2;
  ACTIVE_WITHOUT_TOKENS = 3;
}

message SessionResponse {
  SessionState next_state = 1;
  optional Error error = 2;
}

///////////////////////////

service Health {
  // used for signalling when a component starts
  // communicates peer info and status message
  // time. Once per component startup,
  // if an endpoint receives a subsequent alive
  // request then it treats the peer as if was
  // restarted, and all existing tokens invalidate locally
  rpc Alive(HealthRequest) returns (Response) {}
  // periodic status message called in intervals
  // specified in the initial alive request
  rpc Status(HealthRequest) returns (Response) {}
}

service Device {
  // List of tokens which the device operates on
  // Only valid while the device in an active session
  // If a token request arrives with a non matching
  // session id, it is not accepted
  rpc Activate(TokenRequest) returns (SessionResponse) {}
  rpc Deactivate(SessionRequest) returns (SessionResponse) {}
  rpc StartSession(SessionRequest) returns (SessionResponse) {}
  rpc EndSession(SessionRequest) returns (SessionResponse) {}
}

service Session {
  // for reporting token usage from device to server
  rpc ReportEvent(EventRequest) returns (Response) {}
}
